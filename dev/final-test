#/bin/sh

function echo_help {
cat <<USAGE_END
Usage:
  ./dev/final-test my-branch online|offline debug

USAGE_END
}

function git_check_push_branch {
	TMP_ONLINE="$1"
	CURRENT_BR=`git rev-parse --abbrev-ref HEAD`
	if [ "$CURRENT_BR" != "$BRANCH" ]; then
		echo "Current branch inside '"`pwd`"' doesn't equal '$BRANCH'"
		exit
	fi
	if [ "$TMP_ONLINE" == 1 ]; then
		echo "Doing 'git push' inside "`pwd`
		git push
	fi
}

function update_file {
	CONTENT="$1"
	FPATH="$2"

	FILE_EXISTS=0
	if [ -e "$FPATH" ]; then
		FILE_EXISTS=1
		CURRENT_CONTENT=`cat $FPATH`
	fi
	if [ $"FILE_EXISTS" == 1 -a "$CURRENT_CONTENT" == "$CONTENT" ]; then
		echo "Nothing to do. File '$FPATH' is already up-to-date."
	else
		echo "Updating '$FPATH' with new content."
		echo "$CONTENT" > "$FPATH"
	fi
}

set -e

if [ -z "$1" ]; then
    echo_help
    exit 1
fi

if [ "$1" == '--help' -o "$1" == '-h' ]; then
    echo_help
    exit
fi

BRANCH="$1"

if [ -z "$2" -o "$2" == "online" ]; then
	ONLINE=1
elif [ "$2" == "offline" ]; then
	ONLINE=0
else
	echo "Unknown second parameter. Only 'online' or 'offline' supported."
	exit 1
fi

DEBUG="$3"
if [ "$DEBUG" == "debug" ]; then
	set -x
else
	set +x
fi

TTS_DEV_BRANCH=$BRANCH
TTCL_DEV_BRANCH=$BRANCH

LOG_DIR=$HOME/ttdev/docker-server/temp
mkdir -p "$LOG_DIR"


cd ~/ttdev/tt-server/
git_check_push_branch $ONLINE
TTS_COMMIT=`git rev-parse --short=10 HEAD`

echo "Building mj41/local-tt-server:my image"
cd ~/ttdev/docker-server/
docker build --force-rm --rm -t="mj41/local-tt-server:my" . 2>&1 | tee $LOG_DIR/docker-server.build.log
cat $LOG_DIR/docker-server.build.log | grep -i -P '(err|failed)' || :

echo "Building mj41/local-dev-tt-server:my image"
cd ~/ttdev/docker-server/dev/

mkdir -p docker_param
rm -f docker_param/*
update_file "TapTinder server" docker_param/what
update_file "$TTS_DEV_BRANCH" docker_param/branch.name
update_file "$TTS_COMMIT" docker_param/commit_sha1

docker build --force-rm --rm -t="mj41/local-dev-tt-server:my" . 2>&1 | tee $LOG_DIR/docker-server-dev.build.log
cat $LOG_DIR/docker-server-dev.build.log | grep -i -P '(err|failed)' || :


cd ~/ttdev/tt-client/
git_check_push_branch $ONLINE
TTCL_COMMIT=`git rev-parse --short=10 HEAD`

echo "Building "mj41/local-tt-client:my image"
cd ~/ttdev/docker-client/
docker build --force-rm --rm -t="mj41/local-tt-client:my" . 2>&1 | tee $LOG_DIR/docker-client.build.log
cat $LOG_DIR/docker-client.build.log | grep -i -P '(err|failed)' || :

echo "Building "mj41/local-dev-tt-client:my image"
cd ~/ttdev/docker-client/dev/

mkdir -p docker_param
rm -f docker_param/*
update_file "TapTinder client" docker_param/what
update_file "$TTCL_DEV_BRANCH" docker_param/branch.name
update_file "$TTCL_COMMIT" docker_param/commit_sha1

cp ~/ttdev/docker-server/dev/dev_image_update ~/ttdev/docker-client/dev/dev_image_update-copy

docker build --force-rm --rm -t="mj41/local-dev-tt-client:my" . 2>&1 | tee $LOG_DIR/docker-client-dev.build.log
cat $LOG_DIR/docker-client-dev.build.log | grep -i -P '(err|failed)' || :

export TTS_IMAGE='mj41/local-dev-tt-server:my'
export TTCL_IMAGE='mj41/local-dev-tt-client:my'
cd /home/mj/ttdev/docker-server/
echo "Removing old 'ttdf' TapTinder containers:"
./ttdocker ttdf rm both $DEBUG
echo "Starting new 'ttdf' TapTinder containers:"
./ttdocker ttdf setup both 2040 $DEBUG
