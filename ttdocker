#/bin/sh

function echo_help {
	cat docs/ttdocker-help.txt
	echo ""
}

function echo_dev_help {
	cat docs/ttdocker-dev-help.txt
	echo ""
}

function container_exists {
	CONT_NAME="$1"
	set +e
	docker inspect $CONT_NAME &>/dev/null
	ECODE="$?"
	set -e
	#echo "Output: $ECODE"
	if [ "$ECODE" == 1 ]; then
		echo no
	else
		echo yes
	fi
}

set -e

if [ -z "$1" ]; then
    echo_help
    exit 1
fi

if [ "$1" == '--help' -o "$1" == '-h' ]; then
	echo_help
    exit
fi

if [ "$1" == '--dev-help' -o "$1" == '-dh' ]; then
	echo_dev_help
    exit
fi

CNAME_PREFIX="$1"
CMD="$2"
CMD_FOR="$3"
PAR1="$4"
PAR2="$5"
PAR3="$6"

if [ "$PAR1" == "debug" -o "$PAR2" == "debug" -o "$PAR3" == "debug" ]; then
	set -x
	DEBUG=1
	if [ "$PAR1" == "debug" ]; then
		unset PAR1
	fi
	if [ "$PAR2" == "debug" ]; then
		unset PAR2
	fi
	if [ "$PAR3" == "debug" ]; then
		unset PAR3
	fi
else
	set +x
	DEBUG=0
fi

# setup|start|stop|rm (|bash|dmount)
if [ "$CMD" != "setup" -a "$CMD" != "start" -a "$CMD" != "stop" -a "$CMD" != "rm" -a "$CMD" != "bash" -a "$CMD" != "dmount" ]; then
    echo "Missing/unknown second parameter 'setup', 'start', 'stop' or 'rm' (or 'bash' or 'dmount')."
    echo
    echo_help
    exit 1
fi

# ex-client-only|both|server-only|client-only (or web|cl-base|ex-cl-base)
if [ "$CMD" != "bash" -a "$CMD" != "dmount" ]; then
	if [ "$CMD_FOR" != "ex-client-only" -a "$CMD_FOR" != "both" -a "$CMD_FOR" != "server-only" -a "$CMD_FOR" != "client-only" ]; then
		echo "Missing/unknown third parameter 'ex-client-only', 'both', 'server-only' or 'client-only'."
		echo
		echo_help
		exit 1
	fi
else
	if [ "$CMD_FOR" != "web" -a "$CMD_FOR" != "cl-base" -a "$CMD_FOR" != "ex-cl-base" ]; then
		echo "Missing/unknown third parameter 'web', 'cl-base' or 'ex-cl-base'."
		echo
		echo_help
		exit 1
	fi
fi

# Shortcuts to simplify conditions later:
SERVER=0
if [ "$CMD_FOR" == "server-only" -o "$CMD_FOR" == "both" ]; then
	SERVER=1
fi
CLIENT=0
if [ "$CMD_FOR" == "client-only" -o "$CMD_FOR" == "both" ]; then
	CLIENT=1
fi
EX_CLIENT=0
if [ "$CMD_FOR" == "ex-client-only" -o "$CMD_FOR" == "ex-cl-base" ]; then
	EX_CLIENT=1
fi

# Params.
if [ "$CMD_FOR" == "ex-client-only" ]; then
	# $web-url
	if [ -z "$PAR1" ]; then
		echo "Parameter web-url is mandatory.";
		echo ""
		echo_help
		exit 1
	fi
	PAR_WEB_URL="$PAR1"
fi

if [ "$CMD_FOR" == "both" -o  "$CMD_FOR" == "server-only" ]; then
	# $host-port
	if [ -z "$PAR1" ]; then
		PAR_HOST_PORT=2020
	elif [ "$PAR1" -le 2010 -o "$PAR1" -ge 3000 ]; then
		echo "Please use port within <2011,2999> interval for parameter host-port."
		exit 1
	else
		PAR_HOST_PORT="$PAR1"
	fi
fi


# Default env variables:
if [ -z "$TTS_IMAGE" ]; then
	TTS_IMAGE="mj41/tt-server:stable"
fi
if [ -z "$TTCL_IMAGE" ]; then
	TTCL_IMAGE="mj41/tt-client:stable"
fi

# Default devc env variables:
if [ -z "$HOST_TTDEV_DIR" ]; then
	HOST_TTDEV_DIR="$HOME/ttdev"
fi

# Prepare names of containers:
CNAME_REPOS="${CNAME_PREFIX}-repos"
CNAME_DB="${CNAME_PREFIX}-s-db"
CNAME_DB_DATA="${CNAME_PREFIX}-s-db-data"
CNAME_WEB_DATA="${CNAME_PREFIX}-s-data"
CNAME_WEB_CONF="${CNAME_PREFIX}-s-web-conf"
CNAME_WEB="${CNAME_PREFIX}-s-web"
CNAME_WEB_DEV="${CNAME_PREFIX}-s-web-dev"
CNAME_WORKER_REPOS="${CNAME_PREFIX}-s-wrepos"
CNAME_WORKER_TESTS="${CNAME_PREFIX}-s-wtests"
CNAME_WORKER_IRC="${CNAME_PREFIX}-s-wirc"

if [ "$EX_CLIENT" == 1 ]; then
	CNAME_CLIENT="${CNAME_PREFIX}-excl"
	CNAME_CLIENT_DEV="${CNAME_PREFIX}-excl-dev"
	CNAME_CLIENT_DATA="${CNAME_PREFIX}-excl-data"
	CNAME_CLIENT_CONF="${CNAME_PREFIX}-excl-conf"
else
	CNAME_CLIENT="${CNAME_PREFIX}-cl"
	CNAME_CLIENT_DEV="${CNAME_PREFIX}-cl-dev"
	CNAME_CLIENT_DATA="${CNAME_PREFIX}-cl-data"
	CNAME_CLIENT_CONF="${CNAME_PREFIX}-cl-conf"
fi

# Dev params.
if [ "$CMD_FOR" == "web" ]; then
	# $cport
	if [ -z "$PAR1" ]; then
		PAR_CPORT=2003
	elif [ "$PAR1" -le 2001 -o "$PAR1" -ge 2010 ]; then
		echo "Please use port within <2002,2009> interval for parameter cport."
		exit 1
	else
		PAR_CPORT="$PAR1"
	fi

	# $host-port
	if [ -z "$PAR2" ]; then
		PAR_HOST_PORT=3030
	elif [ "$PAR2" -le 2999 -o "$PAR2" -ge 4000 ]; then
		echo "Please use port within <3000,3999> interval for parameter host-port."
		exit 1
	else
		PAR_HOST_PORT="$PAR2"
	fi
fi

if [ "$CMD_FOR" == "cl-base" ]; then
	# $web-cname
	if [ -z "$PAR1" ]; then
		if [ $(container_exists $CNAME_WEB_DEV) == "yes" ]; then
			PAR_WEB_CNAME="$CNAME_WEB_DEV"
		elif [ $(container_exists $CNAME_WEB) == "yes" ]; then
			PAR_WEB_CNAME="$CNAME_WEB"
		else
			echo "Can't find running '$CNAME_WEB_DEV' or '$CNAME_WEB' container."
			echo "Please setup your containers properly or use 'ex-cl-base' instead of 'ex-cl'."
			exit 1
		fi
	else
		PAR_WEB_CNAME="$PAR1"
		if [ $(container_exists $PAR_WEB_CNAME) == "no" ]; then
			echo "Can't find running '$PAR_WEB_CNAME' container."
			echo "Please provide correct web container name."
			exit 1
		fi
	fi
fi

if [ "$CMD_FOR" == "ex-cl-base" ]; then
	# $web-url
	if [ -z "$PAR1" ]; then
		PAR_WEB_URL='http://sandbox.hub.taptinder.org'
	fi
fi

# Server url.
if [ -z "$PAR_WEB_URL" ]; then
	TTS_URL="http://web:2000"
else
	TTS_URL="$PAR_WEB_URL"
fi


# Setup: Client and/or server parts.
if [ "$CMD" == "setup" ]; then
	if [ $(container_exists $CNAME_REPOS) == "yes" ]; then
		echo "Container $CNAME_REPOS already exists."
	else
		# Prepare 'repos' data container.
		docker run -i -t --name $CNAME_REPOS -v /opt/taptinder/repos busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/repos ; chmod -R a+rwx /opt/taptinder/repos'
	fi
fi

# Setup: Server.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then

	if [ $(container_exists $CNAME_DB_DATA) == "yes" ]; then
		echo "Container $CNAME_DB_DATA already exists."
	else
		# Prepare 'db-data'
		docker run -i -t --name $CNAME_DB_DATA -v /var/lib/mysql busybox /bin/sh -c 'chmod -R a+rwx /var/lib/mysql'
		# Grant 'with grant options' to root@%.
		docker run --rm -i -t --volumes-from $CNAME_DB_DATA -v ~/scripts/:/root/scripts/:r dockerfile/mariadb /bin/bash -c $" \
		   mysql_install_db && \
		   (/usr/bin/mysqld_safe --datadir='/var/lib/mysql' &>/dev/null &) && sleep 3 && \
		   mysql -uroot -e \$\"grant all privileges on *.* to 'root'@'%' with grant option; FLUSH PRIVILEGES;\" && \
		   mysql -uroot -e 'SELECT User,Host,Password FROM mysql.user'; \
		"
	fi

	if [ $(container_exists $CNAME_DB) == "yes" ]; then
		echo "Container $CNAME_DB already exists."
	else
		# Start 'db'
		docker run -d --name $CNAME_DB --volumes-from $CNAME_DB_DATA dockerfile/mariadb
	fi

	if [ $(container_exists $CNAME_WEB_DATA) == "yes" ]; then
		echo "Container $CNAME_WEB_DATA already exists."
	else
		# Prepare server data container.
		docker run -i -t --name $CNAME_WEB_DATA -v /opt/taptinder/server/data busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/server ; chmod -R u+rwx,go-rwx /opt/taptinder/server'
	fi

	if [ $(container_exists $CNAME_WEB_CONF) == "yes" ]; then
		echo "Container $CNAME_WEB_CONF already exists."
	else
		# Prepare server configuration container.
		docker run -i -t --name $CNAME_WEB_CONF -v /opt/taptinder/server/conf busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/server ; chmod -R u+rwx,go-rwx /opt/taptinder/server'
	fi
fi

PAR_HOST_PORT_MAPPING="$PAR_HOST_PORT:2000"

# Check if mounting TTDEV_DIR host directory make sense.
if [ "$CMD" == "cdev" ]; then
	if [ ! -d "$HOST_TTDEV_DIR/tt-server" ]; then
		echo "Directory '$HOST_TTDEV_DIR/tt-server' not found."
		exit 1
	fi
	if [ ! -d "$HOST_TTDEV_DIR/tt-client" ]; then
		echo "Directory '$HOST_TTDEV_DIR/tt-client' not found."
		exit 1
	fi
	chcon -Rt svirt_sandbox_file_t $HOST_TTDEV_DIR
fi

# To debug server web container.
if [ "$CMD" == "dmount" -a "$CMD_FOR" == "web" -o "$CMD" == "bash" -a "$CMD_FOR" == "web" ]; then
	if [ "$CMD" == "dmount" ]; then
		TMP_MOUNT_CMD="-v $HOST_TTDEV_DIR:/home/ttus/ttdev:rw"
		echo "To start web application on port $CPORT (mapped to host port $PAR_HOST_PORT) run:"
		echo "cd /home/ttus/ttdev/tt-server/ ; script/taptinder_web_server.pl -r -p $CPORT"
		echo ""
		echo "On host run:"
		echo "firefox http://localhost:$PAR_HOST_PORT"
		echo ""
	else
		TMP_MOUNT_CMD=""
		echo "To debug setup procedure you can run:"
		echo "cd /home/ttus/ttdev/tt-server/ ; utils/ttdocker-setup.sh force-setup base"
		echo ""
	fi

	if [ $(container_exists $CNAME_WEB_DEV) == "yes" ]; then
		echo "Container $CNAME_WEB_DEV already exists."
	else
		docker run -i -t --rm -p $PAR_HOST_PORT:$PAR_CPORT --link $CNAME_DB:db -u ttus --name $CNAME_WEB_DEV \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_DATA --volumes-from $CNAME_WEB_CONF \
		  $TMP_MOUNT_CMD $TTS_IMAGE /bin/bash
	fi
fi

# Run ttdocker-setup.sh and start server.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WEB) == "yes" ]; then
		echo "Container $CNAME_WEB already exists."
	else
		docker run -d -p $PAR_HOST_PORT_MAPPING --link $CNAME_DB:db -u ttus --name $CNAME_WEB \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_DATA --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'utils/ttdocker-setup.sh no-force base && UWSGI_PLUGIN_DIR=/usr/lib/uwsgi uwsgi --ini /home/ttus/ttdev/docker-server/taptinder_web.uwsgi.ini --http-socket :2000'
	fi
fi

# Setup: Client.
if [ "$CMD" == "setup" -a "$CLIENT" == 1 -o "$CMD" == "setup" -a "$EX_CLIENT" == 1 ]; then
	if [ "$CLIENT" == 1 ]; then
		if [ $(container_exists $CNAME_WEB) == "no" ]; then
			echo "Container $CNAME_WEB not found. Please create it first."
			exit 1
		fi
		CMD_PART_LINK_WEB="--link $CNAME_WEB:web"
	else
		CMD_PART_LINK_WEB=''
	fi

	if [ $(container_exists $CNAME_CLIENT_DATA) == "yes" ]; then
		echo "Container $CNAME_CLIENT_DATA already exists."
	else
		# Prepare 'client' data container.
		docker run -i -t --name $CNAME_CLIENT_DATA -v /opt/taptinder/client busybox /bin/sh -c \
		  'adduser -u 460 -D ttucl ttucl ; chown ttucl:ttucl -R /opt/taptinder/client ; chmod -R u+rwx,go-rwx /opt/taptinder/client'
	fi

	if [ $(container_exists $CNAME_CLIENT_CONF) == "yes" ]; then
		echo "Container $CNAME_CLIENT_CONF already exists."
	else
		# Prepare client configuration container.
		docker run -d --name $CNAME_CLIENT_CONF -v /opt/taptinder/client/conf busybox /bin/sh -c " \
			mkdir -p /opt/taptinder/client/conf && \
			./utils/gen-config-file.sh /opt/taptinder/client/conf/client-conf.yml $TTS_URL dc_
			adduser -u 460 -D ttucl ttucl && \
			chown ttucl:ttucl -R /opt/taptinder/client \
		"
	fi

	if [ $(container_exists $CNAME_CLIENT) == "yes" ]; then
		echo "Container $CNAME_CLIENT already exists."
	else
		docker run -d $CMD_PART_LINK_WEB -u ttucl --name $CNAME_CLIENT \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_CLIENT_DATA --volumes-from $CNAME_CLIENT_CONF \
		  $TTCL_IMAGE
	fi
fi

# To debug client - bash|dmount cl-base|ex-cl-base
if [ "$CMD_FOR" == "cl-base" -o "$CMD_FOR" == "ex-cl-base" ]; then
	if [ "$CMD_FOR" == "cl-base" ]; then
		if [ $(container_exists $PAR_WEB_CNAME) == "no" ]; then
			echo "Container $PAR_WEB_CNAME not found. Please create it first."
			exit 1
		fi
		CMD_PART_LINK_WEB="--link $PAR_WEB_CNAME:web"
	else
		CMD_PART_LINK_WEB=''
	fi

	if [ "$CMD" == "dmount" ]; then
		TMP_MOUNT_CMD="-v $HOST_TTDEV_DIR:/home/ttucl/ttdev:rw"
	else
		TMP_MOUNT_CMD=""
	fi

	if [ $(container_exists $CNAME_CLIENT_DEV) == "yes" ]; then
		echo "Container $CNAME_CLIENT_DEV already exists."
	else
		if [ "$CMD" == "dmount" ]; then
			echo "To debug client (configured to connect to $TTS_URL):"
			echo "cd /home/ttucl/ttdev/tt-client/"
			echo "./utils/gen-config-file.sh /tmp/client-conf.yml '$TTS_URL' ddc_"
			echo "perl ./ttclient.pl --conf_fpath /tmp/client-conf.yml --ver=5"
			echo ""
		else
			echo "See configuration file and run client:"
			echo "cat /opt/taptinder/client/conf/client-conf.yml"
			echo "perl ./ttclient.pl --ver=5"
			echo ""
			echo "or create new config (to connect to $TTS_URL) and run client with it:"
			echo "./utils/gen-config-file.sh /tmp/client-conf.yml '$TTS_URL' ddc_"
			echo "perl ./ttclient.pl --conf_fpath /tmp/client-conf.yml --ver=5"
			echo ""
		fi

		docker run -i -t --rm $CMD_PART_LINK_WEB -u ttucl --name $CNAME_CLIENT_DEV \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_CLIENT_DATA --volumes-from $CNAME_CLIENT_CONF \
		  $TMP_MOUNT_CMD $TTCL_IMAGE /bin/bash
	fi
fi

# Run worker to get new commits to db.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_REPOS) == "yes" ]; then
		echo "Container $CNAME_WORKER_REPOS already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_REPOS \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; perl repository-update.pl --project tt-tr1 ; perl repository-update.pl --project tt-tr2 ; \
		   perl repository-update.pl --project tt-tr3 ; cd .. ; perl utils/db-fill-sqldata.pl sql/data-dev-jobs.pl ; \
		   cd cron ; ./loop-dev.sh'
	fi
fi

# Run worker to get test results to db.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_TESTS) == "yes" ]; then
		echo "Container $CNAME_WORKER_TESTS already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_TESTS \
		  --volumes-from $CNAME_WEB_CONF --volumes-from $CNAME_WEB_DATA \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; ./loop-tests-to-db.sh'
	fi
fi

# Run worker to report results on IRC.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_IRC) == "yes" ]; then
		echo "Container $CNAME_WORKER_IRC already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_IRC \
		  --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; perl ttbot.pl --ibot_id 1 --db_type local'
	fi
fi

if [ "$CMD" != "rm" -a "$CMD" != "stop" -a "$SERVER" == 1 ]; then
	echo ""
	echo "Try to run: firefox http://localhost:$PAR_HOST_PORT"
fi

# start
if [ "$CMD" == "start" -a "$SERVER" == 1 ]; then
	docker start $CNAME_DB
	docker start $CNAME_WEB
	docker start $CNAME_WORKER_REPOS
	docker start $CNAME_WORKER_TESTS
	docker start $CNAME_WORKER_IRC
fi
if [ "$CMD" == "start" -a "$CLIENT" == 1 ]; then
	docker start $CNAME_CLIENT
fi

# stop
# Stop order: client, web server, db.
if [ "$CMD" == "stop" -a "$CLIENT" == 1 ]; then
	docker stop $CNAME_CLIENT
	if [ $(container_exists $CNAME_CLIENT_DEV) == "yes" ]; then
		docker stop $CNAME_CLIENT_DEV
	fi
fi
if [ "$CMD" == "stop" -a "$SERVER" == 1 ]; then
	docker stop $CNAME_WORKER_IRC
	docker stop $CNAME_WORKER_TESTS
	docker stop $CNAME_WORKER_REPOS
	docker stop $CNAME_WEB
	if [ $(container_exists $CNAME_WEB_DEV) == "yes" ]; then
		docker stop $CNAME_WEB_DEV
	fi
	docker stop $CNAME_DB
fi

# rm
if [ "$CMD" == "rm" -a "$CLIENT" == 1 ]; then
	docker rm -v -f $CNAME_CLIENT || :
	if [ $(container_exists $CNAME_CLIENT_DEV) == "yes" ]; then
		docker rm -v -f $CNAME_CLIENT_DEV || :
	fi
	docker rm -v -f $CNAME_CLIENT_DATA || :
	docker rm -v -f $CNAME_REPOS || :
	docker rm -v -f $CNAME_CLIENT_CONF || :
fi
if [ "$CMD" == "rm" -a "$SERVER" == 1 ]; then
	if [ "$CLIENT" != 1 ]; then
		docker stop $CNAME_CLIENT
		if [ $(container_exists $CNAME_CLIENT_DEV) == "yes" ]; then
			docker stop $CNAME_CLIENT_DEV
		fi
	fi
	docker rm -v -f $CNAME_WORKER_IRC || :
	docker rm -v -f $CNAME_WORKER_TESTS || :
	docker rm -v -f $CNAME_WORKER_REPOS || :
	docker rm -v -f $CNAME_WEB || :
	if [ $(container_exists $CNAME_WEB_DEV) == "yes" ]; then
		docker rm -v -f $CNAME_WEB_DEV || :
	fi
	docker rm -v -f $CNAME_WEB_DATA || :
	docker rm -v -f $CNAME_WEB_CONF || :
	docker rm -v -f $CNAME_DB || :
	docker rm -v -f $CNAME_DB_DATA || :
	exit
fi
