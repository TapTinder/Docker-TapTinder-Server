#/bin/sh

function echo_help {
cat <<USAGE_END
Usage:
  ./ttdocker ttlocal|ttdev|ttprod|tt* setup|start|stop|rm client|noclient [2010] [debug]

  Orchestrate your TapTinder containers for

  ttlocal ... local purpose
  ttprod ... production purpose
  ttdev ... development purpose
  tt* ... your custom purpose

  setup ... setup all containers
  start ... start all containers
  stop ... stop all containers
  rm ... remove all containers (delete all data)
  dev ... start bash inside temporary web container

  client ... start also testing (tt-client container)
  no-client ... skip all tt-client container related actions
  client-only ... skip all tt-server container related actions
  ex-client-only ... skip all tt-server container related
                     action and work as remote client

  2010 ... set port of web app (default 2010)

  debug ... run in debug mode

Example:
  ./ttdocker ttlocal start client debug
  ./ttdocker ttprod start noclient

Env variables:
  TTS_IMAGE='mj41/tt-server:develop' ... server image to use
  TTCL_IMAGE='mj41/tt-client:develop' ... client image to use
  TTS_URL='http://perl6.hub.taptinder.org' ... uri of server for external clients
                                               to connect to

USAGE_END

# Debug parameters:
#   TTS_DEBUG=mount_host_server  ... run '...-s-web-debug' container with mounted $LOCAL_TTDEV_DIR
#   TTCL_DEBUG=mount_host_client  ... run '...-s-client-debug' container with mounted $LOCAL_TTDEV_DIR
#	LOCAL_TTDEV_DIR="$HOME/ttdev"

}

function container_exists {
	CONT_NAME="$1"
	set +e
	docker inspect $CONT_NAME &>/dev/null
	ECODE="$?"
	set -e
	#echo "Output: $ECODE"
	if [ "$ECODE" == 1 ]; then
		echo no
	else
		echo yes
	fi
}


if [ -z "$1" ]; then
    echo_help
    exit 1
fi

if [ "$1" == '--help' -o "$1" == '-h' ]; then
    echo_help
    exit
fi

CNAME_PREFIX="$1"
CMD="$2"
CLIENT_PAR="$3"
TTS_WEB_PORT="$4"
DEBUG="$5"

if [ "$DEBUG" = "debug" ]; then
	set -e
	set -x
else
	set +e
fi

if [ "$CMD" != "setup" -a "$CMD" != "start" -a "$CMD" != "stop" -a "$CMD" != "rm" -a "$CMD" != "dev" ]; then
    echo "Missing/unknown second parameter 'setup', 'start', 'stop', 'rm' or 'dev'."
    echo
    echo_help
    exit 1
fi

CLIENT=0
EX_CLIENT=0
SERVER=0
if [ "$CMD" != "dev" ]; then
	if [ "$CLIENT_PAR" != "client" -a "$CLIENT_PAR" != "no-client" -a "$CLIENT_PAR" != "client-only" -a "$CLIENT_PAR" != "ex-client-only" ]; then
		echo "Missing/unknown third parameter 'client', 'no-client', 'client-only' or 'ex-client-only'."
		echo
		echo_help
		exit 1
	fi
	if [ "$CLIENT_PAR" != "no-client" ]; then
		CLIENT=1
	fi
	if [ "$CLIENT_PAR" == "ex-client-only" ]; then
		EX_CLIENT=1
	fi
	if [ "$CLIENT_PAR" != "client-only" -a "$CLIENT_PAR" != "ex-client-only" ]; then
		SERVER=1
	fi
	if [ "$TTS_DEBUG" -a "$TTS_DEBUG" != "mount_host_server" -a "$TTS_DEBUG" != "mount_host_client" ]; then
		echo "Unknown option '$TTS_DEBUG'."
		echo
		echo_help
		exit 1
	fi
fi

if [ -z "$TTS_WEB_PORT" ]; then
	TTS_WEB_PORT=2010
elif [ "$TTS_WEB_PORT" -ge 2000 -a "$TTS_WEB_PORT" -le 2009 ]; then
	echo "Ports from 2000 to 2010 are reserved."
	exit 1
fi

if [ -z "$TTS_IMAGE" ]; then
	TTS_IMAGE="mj41/tt-server:stable"
fi
if [ -z "$TTCL_IMAGE" ]; then
	TTCL_IMAGE="mj41/tt-client:stable"
fi
if [ -z "$TTS_URL" ]; then
	if [ "$EX_CLIENT" == 1 ]; then
		TTS_URL="http://web:2000"
	else
		TTS_URL="http://sandbox.hub.taptinder.org"
	fi
fi
# Debug parameters:
if [ -z "$LOCAL_TTDEV_DIR" ]; then
	LOCAL_TTDEV_DIR="$HOME/ttdev"
fi

CNAME_REPOS="${CNAME_PREFIX}-repos"
CNAME_DB="${CNAME_PREFIX}-s-db"
CNAME_DB_DATA="${CNAME_PREFIX}-s-db-data"
CNAME_WEB_DATA="${CNAME_PREFIX}-s-data"
CNAME_WEB_CONF="${CNAME_PREFIX}-s-web-conf"
CNAME_WEB="${CNAME_PREFIX}-s-web"
CNAME_WEB_DEBUG="${CNAME_PREFIX}-s-web-debug"
CNAME_WORKER_REPOS="${CNAME_PREFIX}-s-wrepos"
CNAME_WORKER_TESTS="${CNAME_PREFIX}-s-wtests"
CNAME_WORKER_IRC="${CNAME_PREFIX}-s-wirc"

if [ "$EX_CLIENT" == 1 ]; then
	CNAME_CLIENT="${CNAME_PREFIX}-excl"
	CNAME_CLIENT_DEBUG="${CNAME_PREFIX}-excl-debug"
	CNAME_CLIENT_DATA="${CNAME_PREFIX}-excl-data"
	CNAME_CLIENT_CONF="${CNAME_PREFIX}-excl-conf"
else
	CNAME_CLIENT="${CNAME_PREFIX}-cl"
	CNAME_CLIENT_DEBUG="${CNAME_PREFIX}-cl-debug"
	CNAME_CLIENT_DATA="${CNAME_PREFIX}-cl-data"
	CNAME_CLIENT_CONF="${CNAME_PREFIX}-cl-conf"
fi

# Setup: Client and/or server parts.
if [ "$CMD" == "setup" ]; then
	if [ $(container_exists $CNAME_REPOS) = "yes" ]; then
		echo "Container $CNAME_REPOS already exists."
	else
		# Prepare 'repos' data container.
		docker run -i -t --name $CNAME_REPOS -v /opt/taptinder/repos busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/repos ; chmod -R a+rwx /opt/taptinder/repos'
	fi
fi

# Setup: Server.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then

	if [ $(container_exists $CNAME_DB_DATA) = "yes" ]; then
		echo "Container $CNAME_DB_DATA already exists."
	else
		# Prepare 'db-data'
		docker run -i -t --name $CNAME_DB_DATA -v /var/lib/mysql busybox /bin/sh -c 'chmod -R a+rwx /var/lib/mysql'
		# Grant 'with grant options' to root@%.
		docker run --rm -i -t --volumes-from $CNAME_DB_DATA -v ~/scripts/:/root/scripts/:r dockerfile/mariadb /bin/bash -c $" \
		   mysql_install_db && \
		   (/usr/bin/mysqld_safe --datadir='/var/lib/mysql' &>/dev/null &) && sleep 3 && \
		   mysql -uroot -e \$\"grant all privileges on *.* to 'root'@'%' with grant option; FLUSH PRIVILEGES;\" && \
		   mysql -uroot -e 'SELECT User,Host,Password FROM mysql.user'; \
		"
	fi

	if [ $(container_exists $CNAME_DB) = "yes" ]; then
		echo "Container $CNAME_DB already exists."
	else
		# Start 'db'
		docker run -d --name $CNAME_DB --volumes-from $CNAME_DB_DATA dockerfile/mariadb
	fi

	if [ $(container_exists $CNAME_WEB_DATA) = "yes" ]; then
		echo "Container $CNAME_WEB_DATA already exists."
	else
		# Prepare server data container.
		docker run -i -t --name $CNAME_WEB_DATA -v /opt/taptinder/server/data busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/server ; chmod -R u+rwx,go-rwx /opt/taptinder/server'
	fi

	if [ $(container_exists $CNAME_WEB_CONF) = "yes" ]; then
		echo "Container $CNAME_WEB_CONF already exists."
	else
		# Prepare server configuration container.
		docker run -i -t --name $CNAME_WEB_CONF -v /opt/taptinder/server/conf busybox /bin/sh -c \
		  'adduser -u 461 -D ttus ttus ; chown ttus:ttus -R /opt/taptinder/server ; chmod -R u+rwx,go-rwx /opt/taptinder/server'
	fi
fi

TTS_WEB_PORT_MAPPING="$TTS_WEB_PORT:2000"

# To debug server.
if [ "$CMD" == "dev" ]; then
	if [ ! -d "$LOCAL_TTDEV_DIR/tt-server" ]; then
		echo "Directory '$LOCAL_TTDEV_DIR/tt-server' not found."
		exit 1
	fi
	chcon -Rt svirt_sandbox_file_t $LOCAL_TTDEV_DIR
fi

if [ "$CMD" == "dev" -a "$TTS_DEBUG" == "mount_host_server" -o "$CMD" == "dev" -a "$TTS_DEBUG" == "wbash" ]; then
	TMP_TTS_WEB_PORT_MAPPING=$TTS_WEB_PORT_MAPPING
	if [ "$TTS_DEBUG" == "mount_host_server" ]; then
		TMP_TTS_WEB_PORT_MAPPING=2001:2000
		echo "To debug web application (mapped to host port 2001) run:"
		echo "cd /home/ttus/ttdev/tt-server/ ; script/taptinder_web_server.pl -r -p 2000"
		echo ""
	else
		echo "To debug setup procedure you can run:"
		echo "cd /home/ttus/ttdev/tt-server/ ; utils/ttdocker-setup.sh force-setup base"
		echo ""
	fi
	if [ $(container_exists $CNAME_WEB_DEBUG) = "yes" ]; then
		echo "Container $CNAME_WEB_DEBUG already exists."
	else
		docker run -i -t --rm -p $TMP_TTS_WEB_PORT_MAPPING --link $CNAME_DB:db -u ttus --name $CNAME_WEB_DEBUG \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_DATA --volumes-from $CNAME_WEB_CONF \
		  -v $LOCAL_TTDEV_DIR:/home/ttus/ttdev:rw $TTS_IMAGE /bin/bash
	fi
fi

# Run ttdocker-setup.sh and start server.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WEB) = "yes" ]; then
		echo "Container $CNAME_WEB already exists."
	else
		docker run -d -p $TTS_WEB_PORT_MAPPING --link $CNAME_DB:db -u ttus --name $CNAME_WEB \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_DATA --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'utils/ttdocker-setup.sh no-force base && UWSGI_PLUGIN_DIR=/usr/lib/uwsgi uwsgi --ini /home/ttus/ttdev/docker-server/taptinder_web.uwsgi.ini --http-socket :2000'
	fi
fi

# Setup: Client.
CMD_PART_LINK_WEB="--link $CNAME_WEB:web"
if [ "$EX_CLIENT" == 0 ]; then
	if [ $(container_exists $CNAME_WEB) = "no" ]; then
		echo "Container $CNAME_WEB not found. Please create it first."
		exit 1
	fi
else
	CMD_PART_LINK_WEB=''
fi

if [ "$CMD" == "setup" -a "$CLIENT" == 1 ]; then
	if [ $(container_exists $CNAME_CLIENT_DATA) = "yes" ]; then
		echo "Container $CNAME_CLIENT_DATA already exists."
	else
		# Prepare 'client' data container.
		docker run -i -t --name $CNAME_CLIENT_DATA -v /opt/taptinder/client busybox /bin/sh -c \
		  'adduser -u 460 -D ttucl ttucl ; chown ttucl:ttucl -R /opt/taptinder/client ; chmod -R u+rwx,go-rwx /opt/taptinder/client'
	fi

	if [ $(container_exists $CNAME_CLIENT_CONF) = "yes" ]; then
		echo "Container $CNAME_CLIENT_CONF already exists."
	else
		CL_TOKEN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)
		# Prepare client configuration container.
		docker run -d --name $CNAME_CLIENT_CONF -v /opt/taptinder/client/conf busybox /bin/sh -c " \
			mkdir -p /opt/taptinder/client/conf && \
			echo '---' > /opt/taptinder/client/conf/client-conf.yml && \
			echo 'reg_token: openTTserver' >> /opt/taptinder/client/conf/client-conf.yml && \
			echo 'client_token: $CL_TOKEN' >> /opt/taptinder/client/conf/client-conf.yml && \
			echo 'server_url: $TTS_URL' >> /opt/taptinder/client/conf/client-conf.yml && \
			adduser -u 460 -D ttucl ttucl && \
			chown ttucl:ttucl -R /opt/taptinder/client && \
			chmod -R u+rwx,go-rwx /opt/taptinder/client && \
			ls -al /opt/taptinder/client/conf/client-conf.yml \
		"
	fi

	if [ $(container_exists $CNAME_CLIENT) = "yes" ]; then
		echo "Container $CNAME_CLIENT already exists."
	else
		docker run -d $CMD_PART_LINK_WEB -u ttucl --name $CNAME_CLIENT \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_CLIENT_DATA --volumes-from $CNAME_CLIENT_CONF \
		  $TTCL_IMAGE
	fi
fi

# To debug client.
if [ "$CMD" == "dev" -a "$TTCL_DEBUG" == "mount_host_client" ]; then

	CMD_PART_LINK_WEB_DEBUG=''
	if [ $(container_exists $CNAME_WEB_DEBUG) = "yes" ]; then
		CMD_PART_LINK_WEB="--link $CNAME_WEB_DEBUG:web_dev"
	fi

	if [ $(container_exists $CNAME_CLIENT_DEBUG) = "yes" ]; then
		echo "Container $CNAME_CLIENT_DEBUG already exists."
	else
		echo "To debug client:"
		echo "cd /home/ttus/ttdev/tt-client/ ; perl ./ttclient.pl --ver=5"
		echo ""

		docker run -i -t --rm $CMD_PART_LINK_WEB $CMD_PART_LINK_WEB_DEBUG --link $CNAME_WEB:web -u ttucl --name $CNAME_CLIENT_DEBUG \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_CLIENT_DATA --volumes-from $CNAME_CLIENT_CONF \
		  -v $LOCAL_TTDEV_DIR:/home/ttucl/ttdev:rw $TTCL_IMAGE /bin/bash
	fi
fi

# Run worker to get new commits to db.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_REPOS) = "yes" ]; then
		echo "Container $CNAME_WORKER_REPOS already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_REPOS \
		  --volumes-from $CNAME_REPOS --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; perl repository-update.pl --project tt-tr1 ; perl repository-update.pl --project tt-tr2 ; \
		   perl repository-update.pl --project tt-tr3 ; cd .. ; perl utils/db-fill-sqldata.pl sql/data-dev-jobs.pl ; \
		   cd cron ; ./loop-dev.sh'
	fi
fi

# Run worker to get test results to db.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_TESTS) = "yes" ]; then
		echo "Container $CNAME_WORKER_TESTS already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_TESTS \
		  --volumes-from $CNAME_WEB_CONF --volumes-from $CNAME_WEB_DATA \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; ./loop-tests-to-db.sh'
	fi
fi

# Run worker to report results on IRC.
if [ "$CMD" == "setup" -a "$SERVER" == 1 ]; then
	if [ $(container_exists $CNAME_WORKER_IRC) = "yes" ]; then
		echo "Container $CNAME_WORKER_IRC already exists."
	else
		# ToDo - remove sql/data-dev-jobs.pl
		docker run -d --link $CNAME_DB:db -u ttus --name $CNAME_WORKER_IRC \
		  --volumes-from $CNAME_WEB_CONF \
		  $TTS_IMAGE /bin/bash -c \
		  'sleep 100 ; cd cron ; perl ttbot.pl --ibot_id 1 --db_type local'
	fi
fi

if [ "$CMD" != "rm" -a "$SERVER" == 1 ]; then
	echo ""
	echo "Try to run: firefox http://localhost:$TTS_WEB_PORT"
fi

# start
if [ "$CMD" == "start" -a "$SERVER" == 1 ]; then
	docker start $CNAME_DB
	docker start $CNAME_WEB
	docker start $CNAME_WORKER_REPOS
	docker start $CNAME_WORKER_TESTS
	docker start $CNAME_WORKER_IRC
fi
if [ "$CMD" == "start" -a "$CLIENT" == 1 ]; then
	docker start $CNAME_CLIENT
fi

# stop
# Stop order: client, web server, db.
if [ "$CMD" == "stop" -a "$CLIENT" == 1 ]; then
	docker stop $CNAME_CLIENT
fi
if [ "$CMD" == "stop" -a "$SERVER" == 1 ]; then
	docker stop $CNAME_WORKER_IRC
	docker stop $CNAME_WORKER_TESTS
	docker stop $CNAME_WORKER_REPOS
	docker stop $CNAME_WEB
	docker stop $CNAME_DB
fi

# rm
if [ "$CMD" == "rm" -a "$CLIENT" == 1 ]; then
	docker rm -v -f $CNAME_CLIENT || :
	docker rm -v -f $CNAME_CLIENT_DATA || :
	docker rm -v -f $CNAME_REPOS || :
	docker rm -v -f $CNAME_CLIENT_CONF || :
fi
if [ "$CMD" == "rm" -a "$SERVER" == 1 ]; then
	if [ "$CLIENT" != 1 ]; then
		docker stop $CNAME_CLIENT
	fi
	docker rm -v -f $CNAME_WORKER_IRC || :
	docker rm -v -f $CNAME_WORKER_TESTS || :
	docker rm -v -f $CNAME_WORKER_REPOS || :
	docker rm -v -f $CNAME_WEB || :
	docker rm -v -f $CNAME_WEB_DATA || :
	docker rm -v -f $CNAME_WEB_CONF || :
	docker rm -v -f $CNAME_DB || :
	docker rm -v -f $CNAME_DB_DATA || :
	exit
fi
